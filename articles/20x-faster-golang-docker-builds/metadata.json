{"url":"https://dev.to/jacktt/20x-faster-golang-docker-builds-289n","slug":"20x-faster-golang-docker-builds","title":"20X Faster Golang Docker Builds","description":"According to the Go command documentation:  \"The go command caches build outputs for reuse in future...","body_markdown":"According to the Go command [documentation](https://pkg.go.dev/cmd/go#hdr-Build_and_test_caching):\n\n_`\"The go command caches build outputs for reuse in future builds.\"`_\n\nThis means that the first time you run go build will take the most time, but all subsequent times will use the cache to reduce building time.\n\n## Dockerfile without caching\nLet's take a look at this Dockerfile\n\n```Dockerfile\nFROM golang:1.21-bullseye as builder\nWORKDIR /app\nCOPY go.mod .\nCOPY go.sum .\nRUN go mod download\nCOPY . .\nRUN go build -o app\n\nFROM ubuntu:22.04\nRUN mkdir /app\nWORKDIR /app\nCOPY --from=builder /app/app .\nENTRYPOINT [\"./app\"]\n```\n\nThis Dockerfile is using 2 states:\n- The first stage is responsible for downloading dependencies and building the binary app.\n- The second state copy this binary app a clean Ubuntu image.\n\nIt did help us cache some layers when they are not changed.\n\nBut every time we build this image, Docker creates a new environment. This means that the go build command will rebuild without using the cache. The more dependencies included in this project, the longer the build process takes.\n\nIn my \"Hello world!\" example, it took 26s to complete the build process.\n\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzeetfw5dtanqod1b0b2.png)\n\n\n\n## Docker cache mount\nCache mounts let you specify a persistent package cache to be used during builds. The persistent cache helps speed up build steps, especially steps that involve installing packages using a package manager. Having a persistent cache for packages means that even if you rebuild a layer, you only download new or changed packages.\n\nCache mounts are created using the `--mount` flag together with the `RUN` instruction in the Dockerfile. To use a cache mount, the format for the flag is `--mount=type=cache,target=\u003cpath\u003e`, where \u003cpath\u003e is the location of the cache directory that you wish to mount into the container.\n\nThe Dockerfile after using the mount flag will look like:\n```Dockerfile\nFROM golang:1.21-bullseye as builder\n\nWORKDIR /app\nCOPY go.mod .\nCOPY go.sum .\nRUN go mod download\nCOPY . .\nENV GOCACHE=/root/.cache/go-build\nRUN --mount=type=cache,target=\"/root/.cache/go-build\" go build -o app\n\nFROM ubuntu:22.04\nRUN mkdir /app\nWORKDIR /app\nCOPY --from=builder /app/app .\nENTRYPOINT [\"./app\"]\n```\n\n\nAfter applying mount cache, it took 1.2s to complete the build process.\n\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qa4f9cyqe2z6yb2ugzoz.png)\n\n\n## References\n- https://pkg.go.dev/cmd/go#hdr-Build_and_test_caching\n- https://docs.docker.com/build/guide/mounts/","body_html":"\u003cp\u003eAccording to the Go command \u003ca href=\"https://pkg.go.dev/cmd/go#hdr-Build_and_test_caching\"\u003edocumentation\u003c/a\u003e:\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003e\u003ccode\u003e\"The go command caches build outputs for reuse in future builds.\"\u003c/code\u003e\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eThis means that the first time you run go build will take the most time, but all subsequent times will use the cache to reduce building time.\u003c/p\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"dockerfile-without-caching\" href=\"#dockerfile-without-caching\"\u003e\n  \u003c/a\u003e\n  Dockerfile without caching\n\u003c/h2\u003e\n\n\u003cp\u003eLet's take a look at this Dockerfile\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight docker\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eFROM\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003egolang:1.21-bullseye\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eas\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003ebuilder\u003c/span\u003e\n\u003cspan class=\"k\"\u003eWORKDIR\u003c/span\u003e\u003cspan class=\"s\"\u003e /app\u003c/span\u003e\n\u003cspan class=\"k\"\u003eCOPY\u003c/span\u003e\u003cspan class=\"s\"\u003e go.mod .\u003c/span\u003e\n\u003cspan class=\"k\"\u003eCOPY\u003c/span\u003e\u003cspan class=\"s\"\u003e go.sum .\u003c/span\u003e\n\u003cspan class=\"k\"\u003eRUN \u003c/span\u003ego mod download\n\u003cspan class=\"k\"\u003eCOPY\u003c/span\u003e\u003cspan class=\"s\"\u003e . .\u003c/span\u003e\n\u003cspan class=\"k\"\u003eRUN \u003c/span\u003ego build \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e app\n\n\u003cspan class=\"k\"\u003eFROM\u003c/span\u003e\u003cspan class=\"s\"\u003e ubuntu:22.04\u003c/span\u003e\n\u003cspan class=\"k\"\u003eRUN \u003c/span\u003e\u003cspan class=\"nb\"\u003emkdir\u003c/span\u003e /app\n\u003cspan class=\"k\"\u003eWORKDIR\u003c/span\u003e\u003cspan class=\"s\"\u003e /app\u003c/span\u003e\n\u003cspan class=\"k\"\u003eCOPY\u003c/span\u003e\u003cspan class=\"s\"\u003e --from=builder /app/app .\u003c/span\u003e\n\u003cspan class=\"k\"\u003eENTRYPOINT\u003c/span\u003e\u003cspan class=\"s\"\u003e [\"./app\"]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eThis Dockerfile is using 2 states:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe first stage is responsible for downloading dependencies and building the binary app.\u003c/li\u003e\n\u003cli\u003eThe second state copy this binary app a clean Ubuntu image.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIt did help us cache some layers when they are not changed.\u003c/p\u003e\n\n\u003cp\u003eBut every time we build this image, Docker creates a new environment. This means that the go build command will rebuild without using the cache. The more dependencies included in this project, the longer the build process takes.\u003c/p\u003e\n\n\u003cp\u003eIn my \"Hello world!\" example, it took 26s to complete the build process.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fnzeetfw5dtanqod1b0b2.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fnzeetfw5dtanqod1b0b2.png\" alt=\"Image description\" loading=\"lazy\" width=\"800\" height=\"165\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"docker-cache-mount\" href=\"#docker-cache-mount\"\u003e\n  \u003c/a\u003e\n  Docker cache mount\n\u003c/h2\u003e\n\n\u003cp\u003eCache mounts let you specify a persistent package cache to be used during builds. The persistent cache helps speed up build steps, especially steps that involve installing packages using a package manager. Having a persistent cache for packages means that even if you rebuild a layer, you only download new or changed packages.\u003c/p\u003e\n\n\u003cp\u003eCache mounts are created using the \u003ccode\u003e--mount\u003c/code\u003e flag together with the \u003ccode\u003eRUN\u003c/code\u003e instruction in the Dockerfile. To use a cache mount, the format for the flag is \u003ccode\u003e--mount=type=cache,target=\u0026lt;path\u0026gt;\u003c/code\u003e, where  is the location of the cache directory that you wish to mount into the container.\u003c/p\u003e\n\n\u003cp\u003eThe Dockerfile after using the mount flag will look like:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight docker\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eFROM\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003egolang:1.21-bullseye\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eas\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003ebuilder\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eWORKDIR\u003c/span\u003e\u003cspan class=\"s\"\u003e /app\u003c/span\u003e\n\u003cspan class=\"k\"\u003eCOPY\u003c/span\u003e\u003cspan class=\"s\"\u003e go.mod .\u003c/span\u003e\n\u003cspan class=\"k\"\u003eCOPY\u003c/span\u003e\u003cspan class=\"s\"\u003e go.sum .\u003c/span\u003e\n\u003cspan class=\"k\"\u003eRUN \u003c/span\u003ego mod download\n\u003cspan class=\"k\"\u003eCOPY\u003c/span\u003e\u003cspan class=\"s\"\u003e . .\u003c/span\u003e\n\u003cspan class=\"k\"\u003eENV\u003c/span\u003e\u003cspan class=\"s\"\u003e GOCACHE=/root/.cache/go-build\u003c/span\u003e\n\u003cspan class=\"k\"\u003eRUN \u003c/span\u003e\u003cspan class=\"nt\"\u003e--mount\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nb\"\u003etype\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ecache,target\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"/root/.cache/go-build\"\u003c/span\u003e go build \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e app\n\n\u003cspan class=\"k\"\u003eFROM\u003c/span\u003e\u003cspan class=\"s\"\u003e ubuntu:22.04\u003c/span\u003e\n\u003cspan class=\"k\"\u003eRUN \u003c/span\u003e\u003cspan class=\"nb\"\u003emkdir\u003c/span\u003e /app\n\u003cspan class=\"k\"\u003eWORKDIR\u003c/span\u003e\u003cspan class=\"s\"\u003e /app\u003c/span\u003e\n\u003cspan class=\"k\"\u003eCOPY\u003c/span\u003e\u003cspan class=\"s\"\u003e --from=builder /app/app .\u003c/span\u003e\n\u003cspan class=\"k\"\u003eENTRYPOINT\u003c/span\u003e\u003cspan class=\"s\"\u003e [\"./app\"]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eAfter applying mount cache, it took 1.2s to complete the build process.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fqa4f9cyqe2z6yb2ugzoz.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fqa4f9cyqe2z6yb2ugzoz.png\" alt=\"Image description\" loading=\"lazy\" width=\"800\" height=\"150\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"references\" href=\"#references\"\u003e\n  \u003c/a\u003e\n  References\n\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://pkg.go.dev/cmd/go#hdr-Build_and_test_caching\"\u003ehttps://pkg.go.dev/cmd/go#hdr-Build_and_test_caching\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://docs.docker.com/build/guide/mounts/\"\u003ehttps://docs.docker.com/build/guide/mounts/\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n","thumbnail":"https://media.dev.to/cdn-cgi/image/width=1000,height=420,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fkj1g9zo5j4zpjfwmmy01.png","author":{"id":"jacktt","name":"Jack"},"created_at":"2023-09-25T10:05:13Z","updated_at":null,"tags":[]}