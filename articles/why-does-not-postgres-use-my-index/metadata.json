{"url":"https://dev.to/jacktt/why-does-not-postgres-use-my-index-5apf","slug":"why-does-not-postgres-use-my-index","title":"Why does not postgres use my index?","description":"This is a quick note           1. Query Conditions Not Matching the Index    The index is not on the...","body_markdown":"_This is a quick note_\n\n## 1. Query Conditions Not Matching the Index\n- The index is not on the columns being queried.\n- The query does not use the leading columns of a composite index.\n- The query is not written in a way that takes advantage of the index's order.\n- The query uses functions or operations that prevent the use of the index (e.g., using functions like LOWER() on the column in the query).\n- Data type mismatches between the column and the query can prevent index usage. Ensure that the data types match exactly.\n\n## 2. Query Planner's Cost Estimates\n- PostgreSQL's query planner estimates the cost of using the index and might decide that a sequential scan is cheaper.\n- The statistics for the table are outdated or inaccurate, leading the planner to make suboptimal decisions. Running ANALYZE can help update these statistics.\n\n## 3. Index Selectivity\nThe index is not selective enough. For example, if a column has many **duplicate values**, scanning the index might not save much time compared to a sequential scan.\n","body_html":"\u003cp\u003e\u003cem\u003eThis is a quick note\u003c/em\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"1-query-conditions-not-matching-the-index\" href=\"#1-query-conditions-not-matching-the-index\"\u003e\n  \u003c/a\u003e\n  1. Query Conditions Not Matching the Index\n\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe index is not on the columns being queried.\u003c/li\u003e\n\u003cli\u003eThe query does not use the leading columns of a composite index.\u003c/li\u003e\n\u003cli\u003eThe query is not written in a way that takes advantage of the index's order.\u003c/li\u003e\n\u003cli\u003eThe query uses functions or operations that prevent the use of the index (e.g., using functions like LOWER() on the column in the query).\u003c/li\u003e\n\u003cli\u003eData type mismatches between the column and the query can prevent index usage. Ensure that the data types match exactly.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"2-query-planners-cost-estimates\" href=\"#2-query-planners-cost-estimates\"\u003e\n  \u003c/a\u003e\n  2. Query Planner's Cost Estimates\n\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePostgreSQL's query planner estimates the cost of using the index and might decide that a sequential scan is cheaper.\u003c/li\u003e\n\u003cli\u003eThe statistics for the table are outdated or inaccurate, leading the planner to make suboptimal decisions. Running ANALYZE can help update these statistics.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"3-index-selectivity\" href=\"#3-index-selectivity\"\u003e\n  \u003c/a\u003e\n  3. Index Selectivity\n\u003c/h2\u003e\n\n\u003cp\u003eThe index is not selective enough. For example, if a column has many \u003cstrong\u003eduplicate values\u003c/strong\u003e, scanning the index might not save much time compared to a sequential scan.\u003c/p\u003e\n\n","thumbnail":"","author":{"id":"jacktt","name":"Jack"},"created_at":"2024-06-05T04:34:27Z","updated_at":null,"tags":[]}