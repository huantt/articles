{"url":"https://dev.to/jacktt/load-private-module-in-golang-project-122l","slug":"load-private-module-in-golang-project","title":"Load Private Module in Golang Project","description":"Load Private Module in Golang Project           Table of Contents    I. How Does go get Work? II. How...","body_markdown":"Load Private Module in Golang Project\n\n\n## Table of Contents\n\n- [I. How Does go get Work?](#i-how-does-go-get-work)\n- [II. How to Load Private Modules](#ii-how-to-load-private-modules)\n- [III. Build Docker Image](#iii-build-docker-image)\n- [IV. Run it on gitlab-ci](#iv-run-it-on-gitlab-ci)\n- [V. Additional Resources](#v-additional-resources)\n- [VI. References](#vi-references)\n\n## I. How Does go get Work?\n\nBefore we delve into the process of obtaining private Go modules, let's first take a look at how the `go get` command functions within the Go ecosystem. To illustrate this, we will perform a simple test:\n\n**1. Create Your Own Private Module:**\nAssume you have a private module hosted on a version control system (VCS) repository, such as `gitlab.com`. This private module contains code that you want to use in your Go project.\n\n**2. Trying to Get This Module on Your Machine:**\nIn a typical scenario, you might expect to be able to use the `go get` command to fetch the private module since your machine has the necessary permissions. However, you might encounter an unexpected challenge.\n\n\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sc4a458aol7vqu7a8uhu.png)\n\n\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ywb5g7pqfph41jujok1l.png)\n\n\nWhen you run `go get {module}`, the Go tooling, by default, attempts to fetch the module from a public Go proxy. If the module is not found there, it will then fall back to attempting to pull from the public repository associated with the module. If the module is still not found or you do not have the necessary permissions to access the private module, you will encounter an error.\n\n## II. How to Load Private Modules\n\nTo load a private module from a specific environment, you can follow the steps below:\n\n### 1. Specifying Private Modules\n\nLet Go Know Which Modules Are Private to Load Directly.\n\nTo address this issue, Go provides the `GOPRIVATE` environment variable. This variable allows you to specify a pattern for module paths that should be considered private. When a module path matches the patterns specified in `GOPRIVATE`, the Go tooling will attempt to fetch the module directly from the source repository rather than relying solely on public proxies.\n\nFor example, to mark the `gitlab.com` domain as private, you can set the `GOPRIVATE` variable like so:\n\n```bash\ngo env -w GOPRIVATE='gitlab.com/*'\n```\n\nTo verify the result, you can run:\n\n```bash\ngo env | grep GOPRIVATE\n```\n\n### 2. Configuring Credentials\n\nTo access private modules, you may need to configure credentials for authentication. There are several ways to achieve this:\n\n**Use SSH:**\nYou can configure Git to use SSH for authentication when fetching private modules. To do this, run the following command:\n\n```bash\ngit config --global url.\"ssh://git@gitlab.com\".insteadOf \"https://gitlab.com\"\n```\n\n**Configure Basic Authentication for HTTPS:**\n\n- **.netrc File in Linux:**\nThe `.netrc` file is used to store credentials for various applications. To configure basic authentication for accessing private modules, create or update the `.netrc` file:\n\n```bash\necho \"machine gitlab.com login $GITLAB_USERNAME password $GITLAB_TOKEN\" \u003e ~/.netrc\n```\n\n`Note: You should create an Access token for it instead of using your password`\n\n## III. Build Docker Image\n\nIf you need to build a Docker image for your project that imports private modules, let's see my Dockerfile example:\n\n```Dockerfile\n# Stage 1: Building the Application\nFROM golang:1.21 as builder\n\n# Pass build-time arguments for Git credentials\nARG GIT_USER\nARG GIT_TOKEN\n\n# Set GOPRIVATE to specify private module pattern\nRUN go env -w GOPRIVATE='gitlab.com/*'\n\n# Set up authentication credentials using .netrc\nRUN echo \"machine gitlab.com login $GIT_USER password $GIT_TOKEN\" \u003e ~/.netrc\n\n# Set the working directory\nWORKDIR /app\n\n# Copy go.mod and go.sum to enable efficient dependency fetching\nCOPY go.mod .\nCOPY go.sum .\n\n# Download project dependencies\nRUN go mod download\n\n# Copy the rest of the application code\nCOPY . .\n\n# Build the application binary\nRUN go build -o app\n\n# Stage 2: Creating the Final Minimal Image\nFROM ubuntu:20.04\n\n# Set the working directory\nWORKDIR /app\n\n# Copy the binary from the builder stage\nCOPY --from=builder /app/app .\n\n# Define the command to run the application\nCMD [\"./app\"]\n```\n\nIn this Dockerfile example, we've divided the process into two stages for clarity and optimization:\n\n**1. Building the Application (`builder` stage):**\n\nThis stage is responsible for fetching dependencies, compiling the application, and preparing it for execution. It utilizes build-time arguments (`GIT_USER` and `GIT_TOKEN`) to configure authentication credentials for accessing private modules. The `GOPRIVATE` environment variable is set to ensure that private modules are fetched correctly. The `~/.netrc` file is used to store authentication credentials securely.\n\n**2. Creating the Final Minimal Image:**\n\nIn this stage, we copy the compiled binary (`app`) from the `builder` stage into this final image. This image does not hold credentials.\n\n### Building the Docker Image:\n\nTo build the Docker image using the provided Dockerfile, you can use the following command:\n\n```bash\ndocker build \\\n--build-arg GIT_USER=jack \\\n--build-arg GIT_TOKEN='{YOUR_TOKEN}' \\\n-t my-golang-app .\n```\n\nReplace `{YOUR_TOKEN}` with your actual Git token. This command sets the build-time arguments `GIT_USER` and `GIT_TOKEN` to provide the required authentication credentials during the image build process.\n\n## IV. Run it on gitlab-ci\n\nSo how to pass credentials into build time when using `gitlab-ci`?\n\n**1. Configure your credentials in Repo/Group Variables:**\n\nYou can configure `GIT_USER` and `GIT_TOKEN` in CI/CD Variables:\n\nYour repo OR Group \u003e Settings \u003e CI/CD \u003e Variables \u003e Add Variable\n\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjya1s3f2hyx4ynp1blr.png)\n\n**2. Write gitlab-ci.yml:**\n\nNow, you can access these variables in gitlab-ci:\n\n```yml\nstages:\n  - build\n\nbuild-docker:\n  stage: build\n  script:\n    - docker build --build-arg GIT_USER=$GIT_USER --build-arg GIT_TOKEN=$GIT_TOKEN -t gitlab.com/jack/my-app .\n    - docker push gitlab.com/jack/my-app\n```\n\n## V. Additional Resources\n\nDepending on your objectives and the scale of your company, it's prudent to consider suitable models. Explore the array of options described in this article: [Link](https://www.sobyte.net/post/2022-03/private-go-module/)\n\n## VI. References\n\n- [Go Module Proxies](https://www.practical-go-lessons.com/chap-18-go-module-proxies)\n- [Private Go Modules Article](https://www.sobyte.net/post/2022-03/private-go-module/)","body_html":"\u003cp\u003eLoad Private Module in Golang Project\u003c/p\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"table-of-contents\" href=\"#table-of-contents\"\u003e\n  \u003c/a\u003e\n  Table of Contents\n\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#i-how-does-go-get-work\"\u003eI. How Does go get Work?\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#ii-how-to-load-private-modules\"\u003eII. How to Load Private Modules\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#iii-build-docker-image\"\u003eIII. Build Docker Image\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#iv-run-it-on-gitlab-ci\"\u003eIV. Run it on gitlab-ci\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#v-additional-resources\"\u003eV. Additional Resources\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#vi-references\"\u003eVI. References\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"i-how-does-go-get-work\" href=\"#i-how-does-go-get-work\"\u003e\n  \u003c/a\u003e\n  I. How Does go get Work?\n\u003c/h2\u003e\n\n\u003cp\u003eBefore we delve into the process of obtaining private Go modules, let's first take a look at how the \u003ccode\u003ego get\u003c/code\u003e command functions within the Go ecosystem. To illustrate this, we will perform a simple test:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e1. Create Your Own Private Module:\u003c/strong\u003e\u003cbr\u003e\nAssume you have a private module hosted on a version control system (VCS) repository, such as \u003ccode\u003egitlab.com\u003c/code\u003e. This private module contains code that you want to use in your Go project.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e2. Trying to Get This Module on Your Machine:\u003c/strong\u003e\u003cbr\u003e\nIn a typical scenario, you might expect to be able to use the \u003ccode\u003ego get\u003c/code\u003e command to fetch the private module since your machine has the necessary permissions. However, you might encounter an unexpected challenge.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--dc3I7E1k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sc4a458aol7vqu7a8uhu.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--dc3I7E1k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sc4a458aol7vqu7a8uhu.png\" alt=\"Image description\" loading=\"lazy\" width=\"486\" height=\"161\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--feg3MdHD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ywb5g7pqfph41jujok1l.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--feg3MdHD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ywb5g7pqfph41jujok1l.png\" alt=\"Image description\" loading=\"lazy\" width=\"499\" height=\"220\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eWhen you run \u003ccode\u003ego get {module}\u003c/code\u003e, the Go tooling, by default, attempts to fetch the module from a public Go proxy. If the module is not found there, it will then fall back to attempting to pull from the public repository associated with the module. If the module is still not found or you do not have the necessary permissions to access the private module, you will encounter an error.\u003c/p\u003e\n\u003ch2\u003e\n  \u003ca name=\"ii-how-to-load-private-modules\" href=\"#ii-how-to-load-private-modules\"\u003e\n  \u003c/a\u003e\n  II. How to Load Private Modules\n\u003c/h2\u003e\n\n\u003cp\u003eTo load a private module from a specific environment, you can follow the steps below:\u003c/p\u003e\n\u003ch3\u003e\n  \u003ca name=\"1-specifying-private-modules\" href=\"#1-specifying-private-modules\"\u003e\n  \u003c/a\u003e\n  1. Specifying Private Modules\n\u003c/h3\u003e\n\n\u003cp\u003eLet Go Know Which Modules Are Private to Load Directly.\u003c/p\u003e\n\n\u003cp\u003eTo address this issue, Go provides the \u003ccode\u003eGOPRIVATE\u003c/code\u003e environment variable. This variable allows you to specify a pattern for module paths that should be considered private. When a module path matches the patterns specified in \u003ccode\u003eGOPRIVATE\u003c/code\u003e, the Go tooling will attempt to fetch the module directly from the source repository rather than relying solely on public proxies.\u003c/p\u003e\n\n\u003cp\u003eFor example, to mark the \u003ccode\u003egitlab.com\u003c/code\u003e domain as private, you can set the \u003ccode\u003eGOPRIVATE\u003c/code\u003e variable like so:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003ego \u003cspan class=\"nb\"\u003eenv\u003c/span\u003e \u003cspan class=\"nt\"\u003e-w\u003c/span\u003e \u003cspan class=\"nv\"\u003eGOPRIVATE\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e'gitlab.com/*'\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eTo verify the result, you can run:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003ego \u003cspan class=\"nb\"\u003eenv\u003c/span\u003e | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003eGOPRIVATE\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003ch3\u003e\n  \u003ca name=\"2-configuring-credentials\" href=\"#2-configuring-credentials\"\u003e\n  \u003c/a\u003e\n  2. Configuring Credentials\n\u003c/h3\u003e\n\n\u003cp\u003eTo access private modules, you may need to configure credentials for authentication. There are several ways to achieve this:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eUse SSH:\u003c/strong\u003e\u003cbr\u003e\nYou can configure Git to use SSH for authentication when fetching private modules. To do this, run the following command:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003egit config \u003cspan class=\"nt\"\u003e--global\u003c/span\u003e url.\u003cspan class=\"s2\"\u003e\"ssh://git@gitlab.com\"\u003c/span\u003e.insteadOf \u003cspan class=\"s2\"\u003e\"https://gitlab.com\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eConfigure Basic Authentication for HTTPS:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003e.netrc File in Linux:\u003c/strong\u003e\nThe \u003ccode\u003e.netrc\u003c/code\u003e file is used to store credentials for various applications. To configure basic authentication for accessing private modules, create or update the \u003ccode\u003e.netrc\u003c/code\u003e file:\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"machine gitlab.com login \u003c/span\u003e\u003cspan class=\"nv\"\u003e$GITLAB_USERNAME\u003c/span\u003e\u003cspan class=\"s2\"\u003e password \u003c/span\u003e\u003cspan class=\"nv\"\u003e$GITLAB_TOKEN\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e ~/.netrc\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003e\u003ccode\u003eNote: You should create an Access token for it instead of using your password\u003c/code\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"iii-build-docker-image\" href=\"#iii-build-docker-image\"\u003e\n  \u003c/a\u003e\n  III. Build Docker Image\n\u003c/h2\u003e\n\n\u003cp\u003eIf you need to build a Docker image for your project that imports private modules, let's see my Dockerfile example:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight docker\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# Stage 1: Building the Application\u003c/span\u003e\n\u003cspan class=\"k\"\u003eFROM\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003egolang:1.21\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eas\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003ebuilder\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# Pass build-time arguments for Git credentials\u003c/span\u003e\n\u003cspan class=\"k\"\u003eARG\u003c/span\u003e\u003cspan class=\"s\"\u003e GIT_USER\u003c/span\u003e\n\u003cspan class=\"k\"\u003eARG\u003c/span\u003e\u003cspan class=\"s\"\u003e GIT_TOKEN\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# Set GOPRIVATE to specify private module pattern\u003c/span\u003e\n\u003cspan class=\"k\"\u003eRUN \u003c/span\u003ego \u003cspan class=\"nb\"\u003eenv\u003c/span\u003e \u003cspan class=\"nt\"\u003e-w\u003c/span\u003e \u003cspan class=\"nv\"\u003eGOPRIVATE\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e'gitlab.com/*'\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# Set up authentication credentials using .netrc\u003c/span\u003e\n\u003cspan class=\"k\"\u003eRUN \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"machine gitlab.com login \u003c/span\u003e\u003cspan class=\"nv\"\u003e$GIT_USER\u003c/span\u003e\u003cspan class=\"s2\"\u003e password \u003c/span\u003e\u003cspan class=\"nv\"\u003e$GIT_TOKEN\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e ~/.netrc\n\n\u003cspan class=\"c\"\u003e# Set the working directory\u003c/span\u003e\n\u003cspan class=\"k\"\u003eWORKDIR\u003c/span\u003e\u003cspan class=\"s\"\u003e /app\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# Copy go.mod and go.sum to enable efficient dependency fetching\u003c/span\u003e\n\u003cspan class=\"k\"\u003eCOPY\u003c/span\u003e\u003cspan class=\"s\"\u003e go.mod .\u003c/span\u003e\n\u003cspan class=\"k\"\u003eCOPY\u003c/span\u003e\u003cspan class=\"s\"\u003e go.sum .\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# Download project dependencies\u003c/span\u003e\n\u003cspan class=\"k\"\u003eRUN \u003c/span\u003ego mod download\n\n\u003cspan class=\"c\"\u003e# Copy the rest of the application code\u003c/span\u003e\n\u003cspan class=\"k\"\u003eCOPY\u003c/span\u003e\u003cspan class=\"s\"\u003e . .\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# Build the application binary\u003c/span\u003e\n\u003cspan class=\"k\"\u003eRUN \u003c/span\u003ego build \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e app\n\n\u003cspan class=\"c\"\u003e# Stage 2: Creating the Final Minimal Image\u003c/span\u003e\n\u003cspan class=\"k\"\u003eFROM\u003c/span\u003e\u003cspan class=\"s\"\u003e ubuntu:20.04\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# Set the working directory\u003c/span\u003e\n\u003cspan class=\"k\"\u003eWORKDIR\u003c/span\u003e\u003cspan class=\"s\"\u003e /app\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# Copy the binary from the builder stage\u003c/span\u003e\n\u003cspan class=\"k\"\u003eCOPY\u003c/span\u003e\u003cspan class=\"s\"\u003e --from=builder /app/app .\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# Define the command to run the application\u003c/span\u003e\n\u003cspan class=\"k\"\u003eCMD\u003c/span\u003e\u003cspan class=\"s\"\u003e [\"./app\"]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eIn this Dockerfile example, we've divided the process into two stages for clarity and optimization:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e1. Building the Application (\u003ccode\u003ebuilder\u003c/code\u003e stage):\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThis stage is responsible for fetching dependencies, compiling the application, and preparing it for execution. It utilizes build-time arguments (\u003ccode\u003eGIT_USER\u003c/code\u003e and \u003ccode\u003eGIT_TOKEN\u003c/code\u003e) to configure authentication credentials for accessing private modules. The \u003ccode\u003eGOPRIVATE\u003c/code\u003e environment variable is set to ensure that private modules are fetched correctly. The \u003ccode\u003e~/.netrc\u003c/code\u003e file is used to store authentication credentials securely.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e2. Creating the Final Minimal Image:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eIn this stage, we copy the compiled binary (\u003ccode\u003eapp\u003c/code\u003e) from the \u003ccode\u003ebuilder\u003c/code\u003e stage into this final image. This image does not hold credentials.\u003c/p\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"building-the-docker-image\" href=\"#building-the-docker-image\"\u003e\n  \u003c/a\u003e\n  Building the Docker Image:\n\u003c/h3\u003e\n\n\u003cp\u003eTo build the Docker image using the provided Dockerfile, you can use the following command:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003edocker build \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e--build-arg\u003c/span\u003e \u003cspan class=\"nv\"\u003eGIT_USER\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ejack \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e--build-arg\u003c/span\u003e \u003cspan class=\"nv\"\u003eGIT_TOKEN\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e'{YOUR_TOKEN}'\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e-t\u003c/span\u003e my-golang-app \u003cspan class=\"nb\"\u003e.\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eReplace \u003ccode\u003e{YOUR_TOKEN}\u003c/code\u003e with your actual Git token. This command sets the build-time arguments \u003ccode\u003eGIT_USER\u003c/code\u003e and \u003ccode\u003eGIT_TOKEN\u003c/code\u003e to provide the required authentication credentials during the image build process.\u003c/p\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"iv-run-it-on-gitlabci\" href=\"#iv-run-it-on-gitlabci\"\u003e\n  \u003c/a\u003e\n  IV. Run it on gitlab-ci\n\u003c/h2\u003e\n\n\u003cp\u003eSo how to pass credentials into build time when using \u003ccode\u003egitlab-ci\u003c/code\u003e?\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e1. Configure your credentials in Repo/Group Variables:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eYou can configure \u003ccode\u003eGIT_USER\u003c/code\u003e and \u003ccode\u003eGIT_TOKEN\u003c/code\u003e in CI/CD Variables:\u003c/p\u003e\n\n\u003cp\u003eYour repo OR Group \u0026gt; Settings \u0026gt; CI/CD \u0026gt; Variables \u0026gt; Add Variable\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--6aDNqQyB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjya1s3f2hyx4ynp1blr.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--6aDNqQyB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjya1s3f2hyx4ynp1blr.png\" alt=\"Image description\" loading=\"lazy\" width=\"800\" height=\"432\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e2. Write gitlab-ci.yml:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eNow, you can access these variables in gitlab-ci:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight yaml\"\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003estages\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003ebuild\u003c/span\u003e\n\n\u003cspan class=\"na\"\u003ebuild-docker\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003estage\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ebuild\u003c/span\u003e\n  \u003cspan class=\"na\"\u003escript\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003edocker build --build-arg GIT_USER=$GIT_USER --build-arg GIT_TOKEN=$GIT_TOKEN -t gitlab.com/jack/my-app .\u003c/span\u003e\n    \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003edocker push gitlab.com/jack/my-app\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003ch2\u003e\n  \u003ca name=\"v-additional-resources\" href=\"#v-additional-resources\"\u003e\n  \u003c/a\u003e\n  V. Additional Resources\n\u003c/h2\u003e\n\n\u003cp\u003eDepending on your objectives and the scale of your company, it's prudent to consider suitable models. Explore the array of options described in this article: \u003ca href=\"https://www.sobyte.net/post/2022-03/private-go-module/\"\u003eLink\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"vi-references\" href=\"#vi-references\"\u003e\n  \u003c/a\u003e\n  VI. References\n\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.practical-go-lessons.com/chap-18-go-module-proxies\"\u003eGo Module Proxies\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.sobyte.net/post/2022-03/private-go-module/\"\u003ePrivate Go Modules Article\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n","thumbnail":"https://res.cloudinary.com/practicaldev/image/fetch/s--ZviKv8F5--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5m3kjdhd57zgk0xpcdr.png","author":{"id":"jacktt","name":"Jack"},"created_at":"2023-08-12T09:12:22Z","updated_at":null,"tags":[]}