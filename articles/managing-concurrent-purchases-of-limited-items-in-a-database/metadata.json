{"url":"https://dev.to/jacktt/managing-concurrent-purchases-of-limited-items-in-a-database-2gm0","slug":"managing-concurrent-purchases-of-limited-items-in-a-database","title":"Managing Concurrent Purchases of Limited Items in a Database","description":"Imagine that we're developing an e-commerce website. In this case, we have a limited number of items...","body_markdown":"_Imagine that we're developing an e-commerce website. In this case, we have a limited number of items while many users are trying to buy them at the same time. In this article, let's try to resolve this problem with some solutions_\n\n### Database-Level Locking\n_You can read this article beforehand to understand Pros an Cons of Optimistic lock \u0026 Pessimistic lock: [link](https://dev.to/jacktt/optimistic-lock-pessimistic-lock-4h36)_\n\n#### Optimistic Locking\n\nOptimistic locking operates on the premise that most database transactions do not conflict. It uses a versioning system to detect conflicts and resolve them without locking the entire database row.\n\n**How It Works:**\n1. Each item in the database has a version number.\n2. When a user attempts to purchase an item, the current version number is checked.\n3. If the version number hasn't changed during the transaction, the purchase is processed and the version number is updated.\n4. If the version number has changed, indicating another transaction has modified the item, the current transaction must retry or fail. \n\nIn this case, we can use `stock` field itself as the version of item.\n\n**Implementation Example:**\n```sql\nUPDATE items \nSET stock = stock - 1\nWHERE item_id = ? AND stock = ?;\n```\nThis SQL statement ensures that the item is updated only if the stock value has not been changed.\n\n#### Pessimistic Locking\n\nWith pessimistic locking, we lock the item for the duration of the transaction, preventing other transactions from updating it.\n\n**How It Works:**\n1. Begin a transaction.\n2. Lock the item row.\n3. Check the stock and perform the purchase if stock is available.\n4. Commit the transaction.\n\n**Implementation Example:**\n```sql\nBEGIN;\nSELECT stock \nFROM items \nWHERE item_id = ? \nFOR UPDATE;\n-- Check stock and update if available\nUPDATE items \nSET stock = stock - 1 \nWHERE item_id = ?;\nCOMMIT;\n```\nThis approach locks the row when checking and updating the stock, preventing other transactions from interfering.\n\n### Application-Level Handling\n\n#### Distributed Locking\n\n**How It Works:**\n1. Acquire a distributed lock for the item when a user attempts to purchase it.\n2. Perform the purchase operation while holding the lock.\n3. Release the lock after the operation.\n\nTo implement this solution, we can use `SETNX` command, that returns 1 if acquire successfully and 0 if other one acquired. Don't forget to set expire time to prevent deadlock in case the owner of the lock crashes before releasing it.\n\n\n### Combining Strategies\n\nA robust solution often combines database and application-level strategies:\n- Use optimistic or pessimistic locking to maintain immediate consistency in the database.\n- Implement distributed locking for higher-level application logic.\n","body_html":"\u003cp\u003e\u003cem\u003eImagine that we're developing an e-commerce website. In this case, we have a limited number of items while many users are trying to buy them at the same time. In this article, let's try to resolve this problem with some solutions\u003c/em\u003e\u003c/p\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"databaselevel-locking\" href=\"#databaselevel-locking\"\u003e\n  \u003c/a\u003e\n  Database-Level Locking\n\u003c/h3\u003e\n\n\u003cp\u003e\u003cem\u003eYou can read this article beforehand to understand Pros an Cons of Optimistic lock \u0026amp; Pessimistic lock: \u003ca href=\"https://dev.to/jacktt/optimistic-lock-pessimistic-lock-4h36\"\u003elink\u003c/a\u003e\u003c/em\u003e\u003c/p\u003e\n\n\u003ch4\u003e\n  \u003ca name=\"optimistic-locking\" href=\"#optimistic-locking\"\u003e\n  \u003c/a\u003e\n  Optimistic Locking\n\u003c/h4\u003e\n\n\u003cp\u003eOptimistic locking operates on the premise that most database transactions do not conflict. It uses a versioning system to detect conflicts and resolve them without locking the entire database row.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eHow It Works:\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eEach item in the database has a version number.\u003c/li\u003e\n\u003cli\u003eWhen a user attempts to purchase an item, the current version number is checked.\u003c/li\u003e\n\u003cli\u003eIf the version number hasn't changed during the transaction, the purchase is processed and the version number is updated.\u003c/li\u003e\n\u003cli\u003eIf the version number has changed, indicating another transaction has modified the item, the current transaction must retry or fail. \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIn this case, we can use \u003ccode\u003estock\u003c/code\u003e field itself as the version of item.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eImplementation Example:\u003c/strong\u003e\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight sql\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eUPDATE\u003c/span\u003e \u003cspan class=\"n\"\u003eitems\u003c/span\u003e \n\u003cspan class=\"k\"\u003eSET\u003c/span\u003e \u003cspan class=\"n\"\u003estock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estock\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003cspan class=\"k\"\u003eWHERE\u003c/span\u003e \u003cspan class=\"n\"\u003eitem_id\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"k\"\u003eAND\u003c/span\u003e \u003cspan class=\"n\"\u003estock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eThis SQL statement ensures that the item is updated only if the stock value has not been changed.\u003c/p\u003e\n\n\u003ch4\u003e\n  \u003ca name=\"pessimistic-locking\" href=\"#pessimistic-locking\"\u003e\n  \u003c/a\u003e\n  Pessimistic Locking\n\u003c/h4\u003e\n\n\u003cp\u003eWith pessimistic locking, we lock the item for the duration of the transaction, preventing other transactions from updating it.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eHow It Works:\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eBegin a transaction.\u003c/li\u003e\n\u003cli\u003eLock the item row.\u003c/li\u003e\n\u003cli\u003eCheck the stock and perform the purchase if stock is available.\u003c/li\u003e\n\u003cli\u003eCommit the transaction.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003eImplementation Example:\u003c/strong\u003e\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight sql\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eBEGIN\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eSELECT\u003c/span\u003e \u003cspan class=\"n\"\u003estock\u003c/span\u003e \n\u003cspan class=\"k\"\u003eFROM\u003c/span\u003e \u003cspan class=\"n\"\u003eitems\u003c/span\u003e \n\u003cspan class=\"k\"\u003eWHERE\u003c/span\u003e \u003cspan class=\"n\"\u003eitem_id\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \n\u003cspan class=\"k\"\u003eFOR\u003c/span\u003e \u003cspan class=\"k\"\u003eUPDATE\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e-- Check stock and update if available\u003c/span\u003e\n\u003cspan class=\"k\"\u003eUPDATE\u003c/span\u003e \u003cspan class=\"n\"\u003eitems\u003c/span\u003e \n\u003cspan class=\"k\"\u003eSET\u003c/span\u003e \u003cspan class=\"n\"\u003estock\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estock\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \n\u003cspan class=\"k\"\u003eWHERE\u003c/span\u003e \u003cspan class=\"n\"\u003eitem_id\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eCOMMIT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eThis approach locks the row when checking and updating the stock, preventing other transactions from interfering.\u003c/p\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"applicationlevel-handling\" href=\"#applicationlevel-handling\"\u003e\n  \u003c/a\u003e\n  Application-Level Handling\n\u003c/h3\u003e\n\n\u003ch4\u003e\n  \u003ca name=\"distributed-locking\" href=\"#distributed-locking\"\u003e\n  \u003c/a\u003e\n  Distributed Locking\n\u003c/h4\u003e\n\n\u003cp\u003e\u003cstrong\u003eHow It Works:\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eAcquire a distributed lock for the item when a user attempts to purchase it.\u003c/li\u003e\n\u003cli\u003ePerform the purchase operation while holding the lock.\u003c/li\u003e\n\u003cli\u003eRelease the lock after the operation.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eTo implement this solution, we can use \u003ccode\u003eSETNX\u003c/code\u003e command, that returns 1 if acquire successfully and 0 if other one acquired. Don't forget to set expire time to prevent deadlock in case the owner of the lock crashes before releasing it.\u003c/p\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"combining-strategies\" href=\"#combining-strategies\"\u003e\n  \u003c/a\u003e\n  Combining Strategies\n\u003c/h3\u003e\n\n\u003cp\u003eA robust solution often combines database and application-level strategies:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eUse optimistic or pessimistic locking to maintain immediate consistency in the database.\u003c/li\u003e\n\u003cli\u003eImplement distributed locking for higher-level application logic.\u003c/li\u003e\n\u003c/ul\u003e\n\n","thumbnail":"","author":{"id":"jacktt","name":"JackTT"},"created_at":"2024-06-06T03:27:59Z","updated_at":null,"tags":[]}