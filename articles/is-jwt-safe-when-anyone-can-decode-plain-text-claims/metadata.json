{"url":"https://dev.to/jacktt/is-jwt-safe-when-anyone-can-decode-plain-text-claims-3anc","slug":"is-jwt-safe-when-anyone-can-decode-plain-text-claims","title":"Is JWT Safe When Anyone Can Decode Plain Text Claims","description":"If I get a JWT and can decode the payload, how is it secure? Why couldn't I just grab the token out...","body_markdown":"If I get a JWT and can decode the payload, how is it secure? Why couldn't I just grab the token out of the header, decode and change the user information in the payload, and then encode it again to access any person's account? - My friend asked me this question today.\n\nThe short answer is NO, you can decode to see payload but can not edit payload!\nLet's see how it works!\n\n## How does JWT work?\nJWT consists of 3 parts: Header, Payload, and Signature.\n```javascript\nconst token = base64urlEncoding(header) + '.' + base64urlEncoding(payload) + '.' + base64urlEncoding(signature)\n```\n\nIt will look like that:\n```\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n```\n\n**Header**\nThe header identifies which algorithm is used to generate the signature.\n\nFor example, decoded header of the above JWT will look like:\n```json\n{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n```\nIt indicates that this JWT uses HS256 (HMAC with SHA-256) algorithm to generate the signature.\n\n**Payload**\nContains a set of claims. The JWT specification defines seven Registered Claim Names which are the standard fields commonly included in tokens such as exp(Expiration Time), iat(Issued at),…\nCustom claims are usually also included, depending on the purpose of the token such as email, user_id, role,…\n\nThe above JWT's Payload is:\n```json\n{\n  \"sub\": \"1234567890\",\n  \"name\": \"John Doe\",\n  \"iat\": 1516239022\n}\n```\n\n**Signature**\nSecurely validates the token. The signature is calculated by encoding the header and payload using Base64url Encoding RFC 4648 and concatenating the two together with a period separator. That string is then run through the cryptographic algorithm specified in the header, in this case, it's HMAC-SHA256. The Base64url Encoding is similar to base64, but uses different non-alphanumeric characters and omits padding.\n\n\n## Answer the questions\n\n### Can anyone decode to see the payload?\nYes, they can! 3 parts of the token are basically Base64url encoding, so everyone can decode easily. You can try it at [jwt.io](https://jwt.io).\n\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x17d5tbyvvzu518jww6u.png)\n\n\n### Can anyone edit the payload?\nSure, everyone can decode to get the JSON payload, edit it then encode it to get a new token with edited payload value.\n\nBut this token is not valid anymore, because the signature is invalid.\n\nScroll up to read \"\u003cu\u003ehow the signature is generated\u003c/u\u003e\" again. \n\"_It's calculated by encoding the header and payload using…_\". So when you edit the payload and then send the token to server, server will calculate the signature, compare and know that your signature is invalid!\n\nSo why don't I generate the corresponding signature? \nNo, you can not! Read \"_how the signature is generated_\" again: \"_That string is then run through the cryptographic algorithm specified in the header_\".\nIn this case, the header indicates that its signature is encrypted using HMAC-SHA256, so if you want to generate the signature, you must have the HMAC-SHA256 **secret key** - that was used to generate this signature before.\n\n### Can anyone validate it's a valid JWT from a server?\nIt depends on the algorithm used in the JWT.\nThe most common algorithm used to sign the JWT is as follows:\n- **HMAC** stands for Hash-based Message Authentication Code, and it is a symmetric algorithm that uses a hash function and a secret key to generate a signature.\n- **RSA** stands for Rivest-Shamir-Adleman, and it is an asymmetric algorithm that uses a public and private key pair to generate and verify a signature.\n\nSo:\n- With HMAC, only users who hold the secret key can validate the JWT.\n- With RSA, anyone can validate the JWT using the public key that is published somewhere.","body_html":"\u003cp\u003eIf I get a JWT and can decode the payload, how is it secure? Why couldn't I just grab the token out of the header, decode and change the user information in the payload, and then encode it again to access any person's account? - My friend asked me this question today.\u003c/p\u003e\n\n\u003cp\u003eThe short answer is NO, you can decode to see payload but can not edit payload!\u003cbr\u003e\nLet's see how it works!\u003c/p\u003e\n\u003ch2\u003e\n  \u003ca name=\"how-does-jwt%C2%A0work\" href=\"#how-does-jwt%C2%A0work\"\u003e\n  \u003c/a\u003e\n  How does JWT work?\n\u003c/h2\u003e\n\n\u003cp\u003eJWT consists of 3 parts: Header, Payload, and Signature.\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003etoken\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003ebase64urlEncoding\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eheader\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003e.\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003ebase64urlEncoding\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003epayload\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003e.\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003ebase64urlEncoding\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esignature\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eIt will look like that:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eeyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eHeader\u003c/strong\u003e\u003cbr\u003e\nThe header identifies which algorithm is used to generate the signature.\u003c/p\u003e\n\n\u003cp\u003eFor example, decoded header of the above JWT will look like:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight json\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"alg\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"HS256\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"typ\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"JWT\"\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eIt indicates that this JWT uses HS256 (HMAC with SHA-256) algorithm to generate the signature.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePayload\u003c/strong\u003e\u003cbr\u003e\nContains a set of claims. The JWT specification defines seven Registered Claim Names which are the standard fields commonly included in tokens such as exp(Expiration Time), iat(Issued at),…\u003cbr\u003e\nCustom claims are usually also included, depending on the purpose of the token such as email, user_id, role,…\u003c/p\u003e\n\n\u003cp\u003eThe above JWT's Payload is:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight json\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"sub\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"1234567890\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"name\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"John Doe\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"iat\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e1516239022\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eSignature\u003c/strong\u003e\u003cbr\u003e\nSecurely validates the token. The signature is calculated by encoding the header and payload using Base64url Encoding RFC 4648 and concatenating the two together with a period separator. That string is then run through the cryptographic algorithm specified in the header, in this case, it's HMAC-SHA256. The Base64url Encoding is similar to base64, but uses different non-alphanumeric characters and omits padding.\u003c/p\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"answer-the-questions\" href=\"#answer-the-questions\"\u003e\n  \u003c/a\u003e\n  Answer the questions\n\u003c/h2\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"can-anyone-decode-to-see-the%C2%A0payload\" href=\"#can-anyone-decode-to-see-the%C2%A0payload\"\u003e\n  \u003c/a\u003e\n  Can anyone decode to see the payload?\n\u003c/h3\u003e\n\n\u003cp\u003eYes, they can! 3 parts of the token are basically Base64url encoding, so everyone can decode easily. You can try it at \u003ca href=\"https://jwt.io\"\u003ejwt.io\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--rzV8uEZG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x17d5tbyvvzu518jww6u.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--rzV8uEZG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x17d5tbyvvzu518jww6u.png\" alt=\"Image description\" loading=\"lazy\" width=\"800\" height=\"296\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"can-anyone-edit-the%C2%A0payload\" href=\"#can-anyone-edit-the%C2%A0payload\"\u003e\n  \u003c/a\u003e\n  Can anyone edit the payload?\n\u003c/h3\u003e\n\n\u003cp\u003eSure, everyone can decode to get the JSON payload, edit it then encode it to get a new token with edited payload value.\u003c/p\u003e\n\n\u003cp\u003eBut this token is not valid anymore, because the signature is invalid.\u003c/p\u003e\n\n\u003cp\u003eScroll up to read \"\u003cu\u003ehow the signature is generated\u003c/u\u003e\" again. \u003cbr\u003e\n\"\u003cem\u003eIt's calculated by encoding the header and payload using…\u003c/em\u003e\". So when you edit the payload and then send the token to server, server will calculate the signature, compare and know that your signature is invalid!\u003c/p\u003e\n\n\u003cp\u003eSo why don't I generate the corresponding signature? \u003cbr\u003e\nNo, you can not! Read \"\u003cem\u003ehow the signature is generated\u003c/em\u003e\" again: \"\u003cem\u003eThat string is then run through the cryptographic algorithm specified in the header\u003c/em\u003e\".\u003cbr\u003e\nIn this case, the header indicates that its signature is encrypted using HMAC-SHA256, so if you want to generate the signature, you must have the HMAC-SHA256 \u003cstrong\u003esecret key\u003c/strong\u003e - that was used to generate this signature before.\u003c/p\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"can-anyone-validate-its-a-valid-jwt-from-a-server\" href=\"#can-anyone-validate-its-a-valid-jwt-from-a-server\"\u003e\n  \u003c/a\u003e\n  Can anyone validate it's a valid JWT from a server?\n\u003c/h3\u003e\n\n\u003cp\u003eIt depends on the algorithm used in the JWT.\u003cbr\u003e\nThe most common algorithm used to sign the JWT is as follows:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eHMAC\u003c/strong\u003e stands for Hash-based Message Authentication Code, and it is a symmetric algorithm that uses a hash function and a secret key to generate a signature.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eRSA\u003c/strong\u003e stands for Rivest-Shamir-Adleman, and it is an asymmetric algorithm that uses a public and private key pair to generate and verify a signature.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eSo:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWith HMAC, only users who hold the secret key can validate the JWT.\u003c/li\u003e\n\u003cli\u003eWith RSA, anyone can validate the JWT using the public key that is published somewhere.\u003c/li\u003e\n\u003c/ul\u003e\n\n","thumbnail":"https://media.dev.to/cdn-cgi/image/width=1000,height=420,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fxgku9dux2s3sohohiy5n.png","author":{"id":"jacktt","name":"Jack"},"created_at":"2023-09-15T06:23:12Z","updated_at":null,"tags":[]}