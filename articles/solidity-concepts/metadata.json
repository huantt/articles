{"url":"https://dev.to/jacktt/solidity-concepts-1p85","slug":"solidity-concepts","title":"Solidity concepts","description":"Concept / Keyword Description     Visibility Specifies the accessibility of functions and state...","body_markdown":"\n| Concept / Keyword      | Description                                                                                                      |\n|------------------------|------------------------------------------------------------------------------------------------------------------|\n| Visibility             | Specifies the accessibility of functions and state variables: `public, internal, external, private`.                |\n| State Variables        | Variables that hold data persistently across function calls within a contract.                                   |\n| Events                 | Mechanism for emitting and logging occurrences within a contract, often used for backend services.            |\n| Modifiers              | You can define modifier and reuse it in functions. (e.g. ownerOnly)                                  |\n| Inheritance            | Feature allowing contracts to inherit properties and methods from parent contracts by using `is` keyword.                               |\n| Libraries              | Collections of reusable Solidity code that can be deployed independently and linked to other contracts by using `library` in the source contract and `import` keyword in the sub contract.          |\n| Structs                | Custom-defined data structures allowing grouping of related data under a single name.                             |\n| Enums                  | User-defined types with a finite set of possible values, useful for defining state transitions and options.       |\n| Arrays                 | Data structures allowing storage of multiple values of the same type under a single variable name.                |\n| Mappings               | Key-value stores allowing efficient storage and retrieval of data based on unique keys.                           |\n| Error Handling         | Techniques for managing exceptions and errors in Solidity, including `revert, require, and assert` statements.     |\n| require                | Statement used for validating conditions within functions, reverting execution if conditions are not met.         |\n| Memory Variables       | Function variables that require explicit declaration of the memory type for temporary storage.                    |\n| msg Structure          | Special global variable providing information about the current transaction, including `sender and value`.         |\n| block Structure        | Special global variable providing information about the current block, including timestamp and difficulty.       |\n| Solidity Assembly      | Low-level language for interacting with EVM directly, allowing fine-grained control over contract execution.     |\n| View and Pure Functions | Functions that promise not to modify state (view) or read from state (pure), enabling optimizations and clarity. |\n| Interface              | Blueprint for other contracts to follow, specifying the functions and events that must be implemented.            |\n| Fallback Function      | Special function invoked when a contract receives Ether without a specific function call.                         |\n\n_`If you think that any other concepts should be remembered, please leave a comment below.`_","body_html":"\u003cdiv class=\"table-wrapper-paragraph\"\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eConcept / Keyword\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eVisibility\u003c/td\u003e\n\u003ctd\u003eSpecifies the accessibility of functions and state variables: \u003ccode\u003epublic, internal, external, private\u003c/code\u003e.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eState Variables\u003c/td\u003e\n\u003ctd\u003eVariables that hold data persistently across function calls within a contract.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eEvents\u003c/td\u003e\n\u003ctd\u003eMechanism for emitting and logging occurrences within a contract, often used for backend services.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eModifiers\u003c/td\u003e\n\u003ctd\u003eYou can define modifier and reuse it in functions. (e.g. ownerOnly)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eInheritance\u003c/td\u003e\n\u003ctd\u003eFeature allowing contracts to inherit properties and methods from parent contracts by using \u003ccode\u003eis\u003c/code\u003e keyword.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eLibraries\u003c/td\u003e\n\u003ctd\u003eCollections of reusable Solidity code that can be deployed independently and linked to other contracts by using \u003ccode\u003elibrary\u003c/code\u003e in the source contract and \u003ccode\u003eimport\u003c/code\u003e keyword in the sub contract.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eStructs\u003c/td\u003e\n\u003ctd\u003eCustom-defined data structures allowing grouping of related data under a single name.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eEnums\u003c/td\u003e\n\u003ctd\u003eUser-defined types with a finite set of possible values, useful for defining state transitions and options.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eArrays\u003c/td\u003e\n\u003ctd\u003eData structures allowing storage of multiple values of the same type under a single variable name.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eMappings\u003c/td\u003e\n\u003ctd\u003eKey-value stores allowing efficient storage and retrieval of data based on unique keys.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eError Handling\u003c/td\u003e\n\u003ctd\u003eTechniques for managing exceptions and errors in Solidity, including \u003ccode\u003erevert, require, and assert\u003c/code\u003e statements.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003erequire\u003c/td\u003e\n\u003ctd\u003eStatement used for validating conditions within functions, reverting execution if conditions are not met.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eMemory Variables\u003c/td\u003e\n\u003ctd\u003eFunction variables that require explicit declaration of the memory type for temporary storage.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003emsg Structure\u003c/td\u003e\n\u003ctd\u003eSpecial global variable providing information about the current transaction, including \u003ccode\u003esender and value\u003c/code\u003e.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eblock Structure\u003c/td\u003e\n\u003ctd\u003eSpecial global variable providing information about the current block, including timestamp and difficulty.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eSolidity Assembly\u003c/td\u003e\n\u003ctd\u003eLow-level language for interacting with EVM directly, allowing fine-grained control over contract execution.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eView and Pure Functions\u003c/td\u003e\n\u003ctd\u003eFunctions that promise not to modify state (view) or read from state (pure), enabling optimizations and clarity.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eInterface\u003c/td\u003e\n\u003ctd\u003eBlueprint for other contracts to follow, specifying the functions and events that must be implemented.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eFallback Function\u003c/td\u003e\n\u003ctd\u003eSpecial function invoked when a contract receives Ether without a specific function call.\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cem\u003e\u003ccode\u003eIf you think that any other concepts should be remembered, please leave a comment below.\u003c/code\u003e\u003c/em\u003e\u003c/p\u003e\n\n","thumbnail":"","author":{"id":"jacktt","name":"Jack"},"created_at":"2024-05-07T03:49:34Z","updated_at":null,"tags":[]}